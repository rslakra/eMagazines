{\rtf1\ansi\ansicpg1252\cocoartf1138\cocoasubrtf320
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\froman\fcharset0 Times-Roman;\f2\fmodern\fcharset0 Courier;
\f3\fswiss\fcharset0 ArialMT;\f4\fnil\fcharset0 Calibri;}
{\colortbl;\red255\green255\blue255;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural

\f0\fs24 \cf0 Code listings for "Jython 101--A Refreshing Look at a Mature Alternative, Part 1," Java Magazine, March/April 2013
\f1\fs18 \
\pard\pardeftab720\ri720\sb120\sa120
\cf0 \
[Listing 1]\
\
>>> lang_list = ['Java','Jython']\
>>> lang_list.insert(1,\'92JRuby\'92)\
>>> lang_list\
['Java', 'JRuby', 'Jython']\
\pard\pardeftab720\ri720

\fs24 \cf0 \
[Listing 2]\
\
\pard\pardeftab720\ri720

\f2\fs18 \cf0 >>> lang_list = ['Java','Jython']\
# Extend a List\
>>> more_langs = ['JavaFX', 'Groovy']\
>>> lang_list.extend(more_langs)\
>>> lang_list\
['Java', 'Jython', 'JavaFX', 'Groovy']\
# Remove the last item from a List\
>>> lang_list.pop()\
'Groovy'\
>>> lang_list\
['Java', 'Jython', 'JavaFX']\
# Remove an arbitrary value from a List\
>>> lang_list.remove('Jython')\
>>> lang_list\
['Java', 'JavaFX']\
# Delete a list\
>>> del more_langs\
>>> print more_langs\
Traceback (most recent call last):\
  File "<stdin>", line 1, in <module>\
NameError: name 'more_langs' is not defined  \
>>> del lang_list[1]\
>>> lang_list\
['Java']\
\pard\pardeftab720\ri720

\fs24 \cf0 \
\pard\pardeftab720\ri720

\f1 \cf0 \
\pard\pardeftab720\ri720\sa120

\f3\fs20 \cf0 [Listing 3]
\f1\fs24 \
\pard\pardeftab720\ri720\sb120\sa120

\fs18 \cf0 >>> x = ['Java','Jython','JRuby']\
# Obtain the first element\
>>> x[0]\
'Java'\
# All elements in range of 1 \'96 3\
>>> x[1:3]\
[\'91Jython\'92, \'91JRuby\'92]\
# Last element in the List\
>>> x[-1]\
\'91JRuby\'92\
\pard\pardeftab720\ri720

\fs24 \cf0 \
[Listing 4]\
\
\pard\pardeftab720\ri720

\f2\fs18 \cf0 # Declare a Dictionary\
>>> book_dict = \{\}\
# Add a key/value pair to the dictionary\
>>> book_dict['Book 1'] = 4\
>>> book_dict['Book 2'] = 2.5  \
>>> book_dict\
\{'Book 2': 2.5, 'Book 1': 4\}\
# Display the keys and values contained within a dict\
>>> book_dict.keys()\
['Book 2', 'Book 1']\
>>> book_dict.values()\
[2.5, 4]\
# Obtain the value for a specified key\
>>> book_dict.get('Book 1')\
4\
\pard\pardeftab720\ri720

\f1\fs24 \cf0 \
[Listing 5]\
\
\pard\pardeftab720\ri720

\f2\fs18 \cf0 >>> from sets import Set\
>>> lang_list = ['Java','Jython','Scala','JRuby','Groovy']\
# Declaring a Set\
>>> lang_set = Set(lang_list)\
>>> lang_set\
Set(['Jython', 'JRuby', 'Scala', 'Java', 'Groovy'])\
# Adding an item to a set\
>>> lang_set.add('Rhino')\
>>> lang_set\
Set(['Jython', 'JRuby', 'Scala', 'Rhino', 'Java', 'Groovy'])\
# If you try to add a duplicate, it will not add\
>>> lang_set.add('Jython')\
>>> lang_set              \
Set(['Jython', 'JRuby', 'Scala', 'Rhino', 'Java', 'Groovy'])\
# Test to see if a Set contains a specified value\
>>> 'Scala' in lang_set\
True\
>>> lang_set_b = Set(['Java','JavaScript','HTML5'])\
# Return a set that does not contain any values of another set\
>>> lang_set - lang_set_b\
Set(['Jython', 'JRuby', 'Scala', 'Rhino', 'Groovy'])\
>>> lang_set_b - lang_set\
Set(['JavaScript', 'HTML5'])\
# Return a set that contains values that only appear in both sets\
>>> lang_set & lang_set_b\
Set(['Java'])\
\pard\pardeftab720\ri720

\fs24 \cf0 \
\pard\pardeftab720\ri720

\f1 \cf0 \
\pard\pardeftab720\ri720\sa120
\cf0 [Listing 6]\
\pard\pardeftab720\ri720\sb120\sa120

\fs18 \cf0 >>> lang_tuple = ('Java','Jython')\
>>> lang_tuple\
('Java', 'Jython')\
\pard\pardeftab720\ri720

\fs24 \cf0 \
[Listing 7]\
\
\pard\pardeftab720\ri720

\f2\fs18 \cf0 # Create a List\
>>> my_list = [1,2,3,4,5]\
# Apply a List comprehension\
# This adds 1 to each element\
>>> [num + 1 for num in my_list]\
[2, 3, 4, 5, 6]\
# Apply a function to elements\
>>> [lang.upper() for lang in lang_list]\
['JAVA', \'91JRUBY\'92,'JYTHON']\
\pard\pardeftab720\ri720

\f1\fs24 \cf0 \
\
[Listing 8]\
\
\pard\pardeftab720\ri720

\f2\fs18 \cf0 # Returns a copy of a given string \
# with every other letter capitalized\
def every_other_cap(para):\
    index = 0\
    try:\
        str = ''\
        for letter in para:\
            if index%2 == 0:\
                str = str + letter.upper()\
            else:\
                str = str + letter\
            index = index + 1\
        return str\
    except TypeError, e:\
        return para\
\pard\pardeftab720\ri720

\f1\fs24 \cf0 \
[Listing 9]\
\
\pard\pardeftab720\ri720

\f2\fs18 \cf0 # Decorator function that returns the square\
# of the sum of the parameters that are passed\
# into the decorated function\
def squared(func):  \
    def inner(*args):\
        val = func(*args) * func(*args)\
        return val\
    return inner\
\
# Decorated function that accepts an arbitrary number\
# of parameters and sums them together.\
@squared\
def square_total(*nums):\
    idx = 0\
    total = 0\
    while idx < len(nums):\
        total = total + nums[idx]\
        idx = idx + 1\
    return total\
\pard\pardeftab720\ri720

\f1 \cf0 \
\pard\pardeftab720\ri720

\fs24 \cf0 [Listing 10]\
\
\pard\pardeftab720\ri720

\f2\fs18 \cf0 class Car:\
    def __init__(self, make, model, year):\
        self.make = make\
        self.model = model\
        self.year = year\
    def print_car(self):\
        print '%s %s - %s' %(self.make, self.model, self.year)\
\pard\pardeftab720\ri720

\fs24 \cf0 \
\pard\pardeftab720\ri720

\f1 \cf0 \
[Listing 11]\
\
\pard\pardeftab720\ri720

\f2\fs18 \cf0 >>> from java.util import ArrayList\
>>> arr = ArrayList()\
>>> arr.add(1)\
True\
>>> arr.add(2)\
True\
>>> arr\
[1, 2]\
\pard\pardeftab720\ri720

\fs24 \cf0 \
\pard\pardeftab720\ri720

\f1 \cf0 \
[Listing 12]\
\
\pard\pardeftab720\ri720

\f2\fs18 \cf0 from javafx.application import Application\
from javafx.event import ActionEvent\
from javafx.event import EventHandler\
from javafx.scene import Scene\
from javafx.scene import Group\
from javafx.scene.control import Label\
from javafx.scene.layout import StackPane\
from javafx.stage import Stage\
\
class HelloWorld(Application):\
    def __init__(self, *args):\
        pass\
    def start(self,stage):\
        scene = Scene(Group())\
        stage.title = "Hello World"\
        stage.width = 250\
        stage.height = 150\
        label = Label('Hello World')\
        scene.root.children.add(label)\
        stage.scene = scene\
        stage.show()\
\
if __name__ == "__main__":\
    Application.launch(HelloWorld().class, [])\
\pard\pardeftab720\ri720

\f1\fs24 \cf0 \
[Listing 13]\
\
\pard\pardeftab720\ri720

\f2\fs18 \cf0 >>> def hello_world():                  \
...    ''' This function prints hello world\
...       to the terminal '''\
...    print 'Hello World'\
... \
>>> hello_world()\
Hello World\
>>> help(hello_world)\
Help on function hello_world in module __main__:\
\
hello_world()\
    This function prints hello world\
    to the terminal\
>>> hello_world.__doc__\
' This function prints hello world\\n      to the terminal '\
\
\
\pard\pardeftab720\ri334\sl276\slmult1\sa200

\f4\fs22 \cf0 Copyright 2013, Oracle Corporation
\f2\fs18 \
}