{\rtf1\ansi\ansicpg1252\cocoartf1138\cocoasubrtf320
{\fonttbl\f0\froman\fcharset0 TimesNewRomanPSMT;\f1\fswiss\fcharset0 ArialMT;\f2\fmodern\fcharset0 CourierNewPSMT;
}
{\colortbl;\red255\green255\blue255;\red9\green14\blue8;}
\margl1440\margr1440\vieww23320\viewh19260\viewkind0
\deftab720
\pard\pardeftab720\ri720\sl276\slmult1

\f0\fs22 \cf0 \
\pard\pardeftab720\ri-6060\sl276\slmult1

\f1\fs24 \cf2 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural
\cf2 Code listings for "\cf0 Exploring Lambda Expressions for the Java Language and the JVM,"\cf2  Java Magazine, November/December  2012\

\fs22 \cf0 \
\pard\pardeftab720\ri720\sl276\slmult1
\cf0 [Listing 1]
\f0 \
\pard\pardeftab720\ri720\sl276\slmult1

\f2\fs16 \cf0        
\f1\fs22  File dir = new File("/an/interesting/location/");\
        FileFilter directoryFilter = new FileFilter() \{\
            public boolean accept(File file) \{\
                return file.isDirectory();\
            \}\
        \};\
        File[] directories = dir.listFiles(directoryFilter);\
\
[Listing 2]\
\
        File dir = new File("/an/interesting/location/");\
        FileFilter directoryFilter = (File f) -> f.isDirectory();\
        File[] directories = dir.listFiles(directoryFilter);\
\
[Listing 3]\
        File dir = new File("/an/interesting/location/");\
        File[] directories = dir.listFiles(f -> f.isDirectory());\
\
[Listing 4]\
        Button button = new Button();\
        button.addActionListener(new ActionListener() \{\
            public void actionPerformed(ActionEvent e) \{\
                ui.showSomething();\
            \}\
        \});\
\
[Listing 5]\
    ActionListener listener = event -> \{ui.showSomething();\};\
    button.addActionListener(listener);\
\
[Listing 6]\
    button.addActionListener(event -> \{ui.showSomething();\});\
\
[Listing 7]\
List<String> myStrings = getMyStrings();\
for (String myString : myStrings) \{\
  if (myString.contains(possible))\
   System.out.println(myString + " contains " + possible);\
  \}\
\}\
\
[Listing 8]\
\pard\pardeftab720\li720\ri720\sl276\slmult1
\cf0 public void printMatchedStrings(List<String> myStrings) \{\
  List<String> out = new ArrayList<>();\
  for (String s: myStrings) \{\
    if (s.equalsIgnoreCase(possible))\
      out.add(s);\
  \}\
  log(out);\
\}\
\pard\pardeftab720\ri720\sl276\slmult1
\cf0 \
[Listing 9]\
	public void printMatchedStrings() \{\
\pard\pardeftab720\li720\ri720\sl276\slmult1
\cf0   Predicate<String> matched = s -> s.equalsIgnoreCase(possible);\
  log(myStrings.filter(matched));\
\}\
\pard\pardeftab720\ri720\sl276\slmult1
\cf0 \
[Listing 10]\
	public void printMatchedStrings() \{\
\pard\pardeftab720\li720\ri720\sl276\slmult1
\cf0   log(myStrings.filter(s -> s.equalsIgnoreCase(possible)));\
\}\
\pard\pardeftab720\ri720\sl276\slmult1
\cf0 \
[Listing 11]\
    ActionListener listener = event -> \{ui.showSomething();\};\
\
[Listing 12]\
    public interface ActionListener \{\
        public void actionPerformed(ActionEvent event);\
    \}\
\
[Listing 13]\
    FileFilter directoryFilter = (File f) -> f.isDirectory();\
\
[Listing 14]\
    public interface FileFilter \{\
        public boolean accept(File pathname);\
    \}\
}