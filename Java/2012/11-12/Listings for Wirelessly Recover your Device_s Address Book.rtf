{\rtf1\ansi\ansicpg1252\cocoartf1138\cocoasubrtf320
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fmodern\fcharset0 Courier;\f2\fnil\fcharset0 Calibri;
\f3\fnil\fcharset0 NeueSansPro-Normal;}
{\colortbl;\red255\green255\blue255;\red50\green50\blue50;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural

\f0\fs24 \cf0 Code listings for "Wirelessly Recover Your Device's Address Book, Part 2," Java Magazine, November/December 2012\
\
\pard\pardeftab720\ri720\sl276\slmult1

\f1\fs22 \cf0 Listing 1
\f2 \

\f1   private void startRestore() \{    \
    log("Restore Started At: " + new Date());\
    btServices.doReceive(this);    \
\pard\pardeftab720\ri720\sl276\slmult1\sa200
\cf0   \}\
\pard\pardeftab720\ri720\sl276\slmult1
\cf0 Listing 2
\f2 \ul \

\f1 \ulnone   byte[] doReceive(final MIDlet caller) \{\
\
    // this might take a while, let the user know\
    working.setLabel("Starting local server... ");\
    display.setCurrent(workingForm);\
    \
    // prepare a URL to create a notifier - this is our \
    // server string\
    final StringBuffer url = \
      new StringBuffer(\
"btgoep://localhost:6674;name=Backup;authorize=false");\
\
    // This starts the listening server in its own thread\
    new Thread() \{\
      public void run() \{\
        try \{            \
          // create the server notifier and the handler\
          SessionNotifier notifier = null;\
          RequestHandler handler = new RequestHandler(\
workingForm, caller);\
          \
          notifier = (SessionNotifier) Connector.open(\
url.toString ());\
          notifier.acceptAndOpen(handler);\
            \
        \} catch (Exception ex) \{\
          handleError(ex);\
        \}\
      \}\
    \}.start();\
    \
    return null;\
\pard\pardeftab720\ri720\sl276\slmult1\sa200
\cf0   \}\
\pard\pardeftab720\ri720\sl276\slmult1
\cf0 Listing 3\
// this class handles the basic commands required to receive \
// the file from the client end\
class RequestHandler extends ServerRequestHandler \{  \
  private Form form;\
  private byte[] payLoad;\
  private MIDlet caller;  \
  public RequestHandler(Form workingForm, MIDlet caller) \{\
    this.form = workingForm;\
    this.caller = caller;\
  \}  \
  public int onPut(Operation op) \{     \
    InputStream in = null;\
    int data;\
    Long dataLength = null;\
    try \{    \
      HeaderSet header = op.getReceivedHeaders();      \
      // we can't proceed if we don't receive any headers\
      if(header == null) \{\
        return ResponseCodes.OBEX_HTTP_BAD_REQUEST;\
      \}             \
      // get the input stream\
      in = op.openDataInputStream();      \
      // check its length\
      dataLength = (Long) header.getHeader(HeaderSet.LENGTH);      \
      // make the payload as long as the header tells us it is\
      int ltOfData = (int)dataLength.longValue();\
      payLoad = new byte[ltOfData];      \
      // and read it\
      data = in.read(payLoad, 0, ltOfData);      \
      form.append("Received backup data from remote client");      \
      ((LaunchMIDlet)caller).receiveBackup(payLoad);      \
    \} catch (Exception ex) \{\
      ex.printStackTrace();\
    \} finally \{\
      try \{\
        in.close();\
      \} catch (Exception e) \{\
        // nothing more to do\
      \}\
    \}\
    \
    return ResponseCodes.OBEX_HTTP_OK;    \
  \}  \
  public byte[] getPayLoad() \{ return this.payLoad; \}\
  public int onConnect(HeaderSet request, HeaderSet reply) \{\
      return ResponseCodes.OBEX_HTTP_OK;\
  \}  \
\pard\pardeftab720\ri720\sl276\slmult1\sa200
\cf0 \}\
\pard\pardeftab720\ri720\sl276\slmult1
\cf0 Listing 4a\
\pard\tqr\tx5580\pardeftab720\ri-1440\sl320

\f3\fs26 \cf2   public void servicesDiscovered(int transID, \
ServiceRecord[] servRecord) \{\
      Operation op = null;\
      OutputStream out = null;\
    for (int i = 0; i < servRecord.length; i++) \{\
      String connURL = servRecord[i].getConnectionURL(\
              ServiceRecord.NOAUTHENTICATE_NOENCRYPT, false);\
      System.err.println(connURL);\
      // found the right service?\
      if (connURL.contains("5")) \{\
        System.err.println("Found service, connecting to it...");\
        try \{\
          // read the local backup file\
          InputStream input =\
                  new BufferedInputStream(new FileInputStream("data.gz"));\
          // read it in to our bucket\
          byte[] bucket = new byte[32 * 1024];\
          ByteArrayOutputStream result = null;\
          result = new ByteArrayOutputStream(bucket.length);\
          int bytesRead = 0;\
          while (bytesRead != -1) \{\
            bytesRead = input.read(bucket);\
            if (bytesRead > 0) \{\
              result.write(bucket, 0, bytesRead);\
            \}\
          \}
\f1\fs22 \cf0 \
\pard\pardeftab720\ri720\sl276\slmult1
\cf0 \
Listing 4b\
\pard\tqr\tx5580\pardeftab720\ri-1440\sl320

\f3\fs26 \cf2           ClientSession clientSession = \
                  (ClientSession) Connector.open(connURL);\
          HeaderSet rHeaders = clientSession.connect(null);\
\pard\tqr\tx5580\pardeftab720\ri-1440\sl320
\cf2 \kerning1\expnd-1\expndtw-4
          if (rHeaders.getResponseCode() != ResponseCodes.OBEX_HTTP_OK) \{\
\pard\tqr\tx5580\pardeftab720\ri-1440\sl320
\cf2 \kerning1\expnd0\expndtw0             System.err.println("Invalid header: " + \
rHeaders.getResponseCode());\
            return;\
          \}\
          // if we are here, then response code was ok\
          byte[] sm = result.toByteArray();\
          // create a new set of headers\
          HeaderSet headers = clientSession.createHeaderSet();\
          headers.setHeader(HeaderSet.NAME, "data.gz");\
          headers.setHeader(HeaderSet.TYPE, "binary");\
          headers.setHeader(HeaderSet.LENGTH, new Long(sm.length));\
\
          op = clientSession.put(headers);\
          out = op.openOutputStream();\
          out.write(sm);\
          clientSession.disconnect(null);\
        \} catch (Exception ex) \{\
          ex.printStackTrace();\
        \} finally \{\
          try \{ out.close(); op.close(); \}\
            catch (Exception e) \{\
          \} \} \} \} \} \
\
Listing 5\
      PIMItem[] contacts =\
              PIM.getInstance().fromSerialFormat(lzc, "UTF-8");\
\
      // add to contacts - so open it up in read+write mode.\
      ContactList addressbook =\
              (ContactList) (PIM.getInstance().openPIMList(\
              PIM.CONTACT_LIST, PIM.READ_WRITE));\
      // the contacts will contain only the first vcard - this \
      // is a limitation of the fromSerialFormat method; I left \
      // the addition of the rest of the contacts as an exercise \
      // for the reader\
      Contact first_contact = (Contact) contacts[0];\
      // import it into the addressbook\
      Contact cn = addressbook.importContact(first_contact);\
      // and commit\
      cn.commit();      \
      msgAlert.setString("Backup Restored!");\
\
\
Copyright 2012, Oracle Corporation
\f1\fs22 \cf0 \
\pard\pardeftab720\ri720\sl276\slmult1
\cf0     \
}